# This is the name of the workflow, visible on GitHub UI.
name: buildTest
on: [push]

jobs:
  build:
    name: Test compiling examples for set of boards
    
    runs-on: ubuntu-latest # I picked Ubuntu to use shell scripts.
    
    env: # Output colors
      RED: '\033[0;31m'
      GREEN: '\033[0;32m'
      YELLOW: '\033[1;33m'
      BLUE: '\033[0;34m'
      
    strategy:
      matrix:
        # The matrix will produce one job for each configuration parameter of type `arduino-boards-fqbn`
        ####################################################################
        arduino-boards-fqbn: ["digistump:avr:digispark-tiny1", "ATTinyCore:avr:attinyx5:chip=85,clock=1internal", "arduino:avr:uno"]

        # Choose the right platform for the boards we want to test.
        # This works like this: when the platformn is "digistump:avr:digispark-tiny", or "digistump:avr:digispark-tiny1" the
        # variable `platform` is set to "digistump:avr". Just take the first 2 token of the fqbn - this cannot be automatically done by GitHub workflow :-(
        ##################################################################
        include:
          - arduino-boards-fqbn: "digistump:avr:digispark-tiny1"  # ATtiny85 board @1 MHz
            platform: "digistump:avr"
            # examples: "SimpleFrequencyDetector" # Space separated list of examples to build, build all if omitted or empty
            
          - arduino-boards-fqbn: "ATTinyCore:avr:attinyx5:chip=85,clock=1internal"
            platform: "ATTinyCore:avr"
            
          - arduino-boards-fqbn: "arduino:avr:uno"
            platform: "arduino:avr"
            
        
      # Do not cancel all jobs / architectures if one job fails
      fail-fast: false

    # This is the list of steps this job will run.
    steps:
    
      # First of all, we clone the repo using the `checkout` action.
      - name: Checkout
        uses: actions/checkout@master

      # We use the `arduino/setup-arduino-cli` action to install and
      # configure the Arduino CLI on the system.
      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v1.0.0
        
      # Here we have only the matrix values for this job i.e. only one platform and fqbn
      #- name: Dump matrix context
      #  run: echo " ${{ toJson(matrix) }} "
        
      - name: Link this repository as Arduino library
        run: |
          mkdir -p $HOME/Arduino/libraries
          ln -s $PWD $HOME/Arduino/libraries/.
        
      - name: Install platform from build matrix
        run: |
          arduino-cli core update-index
          arduino-cli core install ${{ matrix.platform }} # for each job / board one platform is installed
          
      - name: List installed boards with their FQBN
        run: |
          arduino-cli board listall
          # ls -l $HOME/.arduino15/packages/ # I see only arduino and one of the Attiny cores but not all 3 together
          # echo -e HOME=\"$HOME\" # /home/runner
          # echo PWD=$PWD # /home/runner/work/Github-Actions-Test/Github-Actions-Test
          # which arduino-cli # /opt/hostedtoolcache/arduino-cli/0.9.0/x64/arduino-cli

                
      # Finally, we compile the sketch, using the FQBN that was set in the build matrix.
      - name: Compile all examples
        run: |
          if [ "${{ matrix.examples }}" == "" ]; then
          echo -e "Compiling ALL examples for board ${{ matrix.arduino-boards-fqbn }} \n"
          examples=($(find . -name "*.ino"))
          for example in "${examples[@]}"; do # Loop over all example directories
          echo -n "Compiling $(dirname $example) "
          build_stdout=$(arduino-cli compile --verbose --warnings all --fqbn ${{ matrix.arduino-boards-fqbn }} $(dirname $example) 2>&1);
          if [ $? -ne 0 ]; then echo -e """$RED""\xe2\x9c\x96"; exit_code=1; echo "$build_stdout"; else echo -e ""$GREEN"\xe2\x9c\x93"; fi # If ok output a green check else a red X and the command output.
          done
          else
          echo -e "Compiling SELECTED examples for board ${{ matrix.arduino-boards-fqbn }} \n"
          for example in "${{ matrix.examples }}"; do
          echo -n "Compiling $example "
          build_stdout=$(arduino-cli compile --verbose --warnings all --fqbn ${{ matrix.arduino-boards-fqbn }} ./examples/$example 2>&1); if [ $? -ne 0 ]; 
          then echo -e """$RED""\xe2\x9c\x96"; exit_code=1; echo "$build_stdout"; else echo -e ""$GREEN"\xe2\x9c\x93"; fi # If ok output a green check else a red X and the command output.
          done
          fi
          exit $exit_code
        shell: bash {0} # Needed to avoid an exit at first error
        
      ##########################################################
      # THIS DOES NOT YET WORK  
      #- name: Cache Arduino packages
      # does not work, since the cache does not contain all installed platforms :-(
      # And we can not build separate caches for each platform 
      #  id: arduino15-packages-env.MATRIX_PLATFORM <- This is a syntax error and this too: arduino15-packages-${{ matrix.platform }}
      #  uses: actions/cache@v1 # using version 1
      #  with:
      #    path: $HOME/.arduino15/packages/
      #    key: arduino15-packages-env.MATRIX_PLATFORM
