# LibraryBuildWithSteps.yml
# Github workflow script to test compile all examples of an Arduino library repository.
#
# Copyright (C) 2020  Armin Joachimsmeyer
# https://github.com/ArminJo/Github-Actions
#
# Before being able to push to my .github\workflows directories,
# I had to create a new personal token with workflow enabled at https://github.com/settings/tokens

# This is the name of the workflow, visible on GitHub UI.
name: LibraryBuildWithSteps
on:  
  push: # see: https://help.github.com/en/actions/reference/events-that-trigger-workflows#pull-request-event-pull_request
    paths:
    - '**.ino'
    - '**.cpp'
    - '**.h'
    - '**LibraryBuildWithSteps.yml'
  pull_request:

jobs:
  build:
    name: ${{ matrix.arduino-boards-fqbn }} - test compiling examples

    runs-on: ubuntu-latest # I picked Ubuntu to use shell scripts.

    env:
      # Comma separated list without double quotes around the list. 
      REQUIRED_LIBRARIES: ATtinySerialOut

      # Global color definitions for output colors
      RED: '\033[0;31m'
      GREEN: '\033[0;32m'
      YELLOW: '\033[1;33m'
      BLUE: '\033[0;34m'

    strategy:
      matrix:
        # The matrix will produce one job for each configuration parameter of type `arduino-boards-fqbn`
        # In the Arduino IDE, the fqbn is printed in the first line of the verbose output for compilation as parameter -fqbn=... for the "arduino-builder -dump-prefs" command
        #
        # Examples: arduino:avr:uno, arduino:avr:leonardo, arduino:avr:nano, arduino:avr:mega
        # arduino:sam:arduino_due_x, arduino:samd:arduino_zero_native"
        # ATTinyCore:avr:attinyx5:chip=85,clock=1internal, digistump:avr:digispark-tiny, digistump:avr:digispark-pro
        # STM32:stm32:GenF1:pnum=BLUEPILL_F103C8
        # esp8266:esp8266:huzzah:eesz=4M3M,xtal=80, esp32:esp32:featheresp32:FlashFreq=80
        # You may add a suffix behind the fqbn with "|" to specify one board for e.g. different compile options like arduino:avr:uno|trace
        #############################################################################################################
        arduino-boards-fqbn:
          - arduino:avr:uno
          - digistump:avr:digispark-tiny1
          - ATTinyCore:avr:attinyx5:chip=85,clock=1internal

        # Specify parameters for each board.
        # With examples-exclude you may exclude specific examples for a board. Use a comma separated list.
        #############################################################################################################
        include:
          - arduino-boards-fqbn: digistump:avr:digispark-tiny1  # ATtiny85 board @1 MHz
            platform-url: http://digistump.com/package_digistump_index.json
            examples-exclude: Blink

          - arduino-boards-fqbn: ATTinyCore:avr:attinyx5:chip=85,clock=1internal
            platform-url: http://drazzy.com/package_drazzy.com_index.json

      # Do not cancel all jobs / architectures if one job fails
      fail-fast: false

    # This is the list of steps this job will run.
    steps:

      # First of all, we clone the repo using the `checkout` action.
      - name: Checkout
        uses: actions/checkout@master

##################################################################################################
# This fixed script section can be replaced by the action ArminJo/arduino-test-compile@master
##################################################################################################

      # We use the `arduino/setup-arduino-cli` action to install and
      # configure the Arduino CLI on the system.
      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v1.0.0

      - name: Link this repository as Arduino library
        run: |
          mkdir -p $HOME/Arduino/libraries
          ln -s $PWD $HOME/Arduino/libraries/.

      - name: Install platform from build matrix
        env:
          FQBN: ${{ matrix.arduino-boards-fqbn }}
        run: |
          arduino-cli version
          # Compute platform value and check for platform-url parameter
          remainder=${FQBN#*:}; PLATFORM=${FQBN%%:*}:${remainder%%:*}
          if [[ ${PLATFORM} != *"arduino"* && ! (-f ./arduino-cli.yaml || "${{ matrix.platform-url }}" != ""  ) ]]; then
            echo "::error::Non Arduino platform ${PLATFORM} requested, but \"platform-url\" parameter and file arduino-cli.yaml are missing."; exit 1
          fi
          if [[ "${{ matrix.platform-url }}" != "" ]]; then
            arduino-cli core update-index --additional-urls "${{ matrix.platform-url }}"
            echo -e "arduino-cli core install $PLATFORM --additional-urls \"${{ matrix.platform-url }}\""
            arduino-cli core install ${PLATFORM} --additional-urls "${{ matrix.platform-url }}" # for each job / board one platform is installed
          else
            arduino-cli core update-index
            echo "arduino-cli core install $PLATFORM"
            arduino-cli core install ${PLATFORM} # for each job / board one platform is installed
          fi
          if [ ${PLATFORM} == "esp32:esp32" ]; then pip install pyserial; fi

      - name: List installed boards with their FQBN
        run: |
          arduino-cli board listall

      - name: Install libraries
        run: |
          if [[ -z $REQUIRED_LIBRARIES ]]; then
            echo "No additional libraries to install"
          else
            echo "Install libraries $REQUIRED_LIBRARIES"
            # Support comma separated library list
            BACKUP_IFS="$IFS"
            IFS=$','
            declare -a REQUIRED_LIBRARIES_ARRAY=( $REQUIRED_LIBRARIES )
            IFS="$BACKUP_IFS"            
            declare -p REQUIRED_LIBRARIES_ARRAY # print properties of REQUIRED_LIBRARIES_ARRAY
            echo "Install libraries list ${REQUIRED_LIBRARIES_ARRAY[@]}"
            arduino-cli lib install "${REQUIRED_LIBRARIES_ARRAY[@]}"
          fi
          
      # Finally, we compile all examples, using all parameter given in the build matrix.
      - name: Compile all examples
        env:
          FQBN: ${{ matrix.arduino-boards-fqbn }}
          BUILD_PROPERTIES: ${{ toJson(matrix.examples-build-properties) }}
        run: |
          # If matrix.examples-build-properties are specified, create an associative shell array
          BUILD_PROPERTIES=${BUILD_PROPERTIES#\{} # remove "{"
          if [[ $BUILD_PROPERTIES != "null" ]]; then declare -A PROP_MAP="( $(echo $BUILD_PROPERTIES | sed -E 's/"(\w*)": *([^,}]*)[,}]/\[\1\]=\2/g' ) )"; else declare -A PROP_MAP=( [dummy]=dummy ); fi
          echo -e "Compiling examples for board ${{ matrix.arduino-boards-fqbn }} \n"
          EXAMPLES=($(find . -name "*.ino"))
          for example in "${EXAMPLES[@]}"; do # Loop over all example directories
            EXAMPLE_NAME=$(basename $(dirname $example))
            if [[ "${{ matrix.examples-exclude }}" == *"$EXAMPLE_NAME"* ]]; then
              echo -e "Skipping $EXAMPLE_NAME \xe2\x9e\x9e" # Right arrow
            else
              # check if there is an entry in the associative array and create a compile parameter
              echo -n "Compiling $EXAMPLE_NAME "
              if [[ "${PROP_MAP[$EXAMPLE_NAME]}" != "" ]]; then echo -n "with ${PROP_MAP[$EXAMPLE_NAME]} "; fi
              build_stdout=$(arduino-cli compile --verbose --warnings all --fqbn ${FQBN%|*} --build-properties compiler.cpp.extra_flags="${PROP_MAP[$EXAMPLE_NAME]}" $(dirname $example) 2>&1);
              if [ $? -ne 0 ]; then
                echo -e ""$RED"\xe2\x9c\x96" # If ok output a green checkmark else a red X and the command output.
                echo "::error::Compile of  $EXAMPLE_NAME ${PROP_MAP[$EXAMPLE_NAME]} failed"
                exit_code=1
                echo -e "$build_stdout \n"
              else
                echo -e ""$GREEN"\xe2\x9c\x93"
              fi
            fi
          done
          exit $exit_code
        shell: bash {0} # Needed to avoid an exit at first error